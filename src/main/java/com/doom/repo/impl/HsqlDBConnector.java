package com.doom.repo.impl;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

import org.hsqldb.Server;

import com.doom.Helper;
import com.doom.exception.DoomRepoException;
import com.doom.repo.SqlRepository;
import com.doom.utils.PropertyKey;

public class HsqlDBConnector implements SqlRepository  {
	static Server hsqlServer = null;
	private Properties properties;
	
	
	private HsqlDBConnector(Properties properties) {
		this.properties = properties;
	}
	
	private static SqlRepository repository;
	private Connection connection = null; 
	
	public static SqlRepository getRepository(Properties properties) {
		
		if(repository == null) {
			synchronized (HsqlDBConnector.class) {
				if(repository == null) {
					startDatabase();
					repository = new HsqlDBConnector(properties);
				}
			}
		}
		return repository;
		
	}

	@Override
	public Connection getConnection() {
		if(connection == null) {
			synchronized (HsqlDBConnector.class) {
				
				if(connection == null) {
					try {
						
						Class.forName(properties.getProperty(PropertyKey.JDBC_DRIVER));
						connection = DriverManager.getConnection(
								properties.getProperty(PropertyKey.JDBC_CONNECTION_URL), 
								properties.getProperty(PropertyKey.JDBC_DB_USER_NAME), 
								properties.getProperty(PropertyKey.JDBC_DB_PASSWORD,""));
						populateDefaultData();
					} catch (URISyntaxException | IOException | SQLException | ClassNotFoundException e) {
						throw new DoomRepoException(e);
					}
				}
			}
		}
		
		return connection;
	}
	
	private void populateDefaultData() throws URISyntaxException, IOException, SQLException {
		createTables();
		dumpData();
	}	
	
	private void executeLine(String line) {
		if(line == null || line.trim().equals("")) return ;
		try {
			connection.createStatement().execute(line);
		} catch (SQLException e) {
			throw new DoomRepoException(e);
		}
	}
	
	
	private  void createTables() throws SQLException {
		
		connection
				.prepareStatement(
						"create table if not exists users"
						+ " (id integer GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)"
						+ ",name varchar(20) not null"
						+ ",level integer"
						+ ",life integer"
						+ ",score integer"
						+ ",trainee BOOLEAN DEFAULT FALSE NOT NULL);")
				.execute();
		
		DatabaseMetaData dbm = connection.getMetaData();
		ResultSet tables = dbm.getTables(null, null, "rules".toUpperCase(), null);
		if (!tables.next()) {
			String rulesSql = "create table rules "
					+ " (difficulty integer"
					+ ",description varchar(500)"
					+ ",weaponType varchar(10)"
					+ ",score integer"
					+ ");";
			connection.createStatement().execute(rulesSql);
		}
		connection.commit();
	}
	
	private  void dumpData() throws URISyntaxException, IOException, SQLException {
		
		connection.createStatement().execute("delete from users where name in ('Mostofa', 'Trainee')");
		try (InputStream stream = Helper.class.getClassLoader().getResourceAsStream("doom.sql");) {
			BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
			while(reader.ready()) {
				String line = reader.readLine();
				executeLine(line);
			}
		}
	}
	
	private static void startDatabase() {
		hsqlServer = new Server();
		hsqlServer.setLogWriter(null);
		hsqlServer.setSilent(true);
		hsqlServer.setDatabaseName(0, "doom");
		hsqlServer.setDatabasePath(0, "file:~/doomdata/doom");
		hsqlServer.start();
	}

	@Override
	public void close() throws Exception {
		hsqlServer.stop();
		hsqlServer.shutdown();
		hsqlServer = null;
		connection=null;	
	}
	
	
	
	
}
